name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgres://testuser:testpassword@localhost:5432/testdb

jobs:
  build:

    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13 # Using a specific version like 13 is often more stable than :latest
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432 # Map container port to host (runner) port
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: '1.78.0'
        profile: minimal
        override: true
    - name: Install sqlx-cli
      run: cargo install sqlx-cli --version "0.7.4" --locked --no-default-features --features native-tls,postgres
    - name: Initialize Database Schema
      env:
        PGPASSWORD: testpassword # Use the same password defined for the service
      run: |
        # Optional: Install psql client if not available, though it's usually on GitHub runners
        # sudo apt-get update && sudo apt-get install -y postgresql-client
        psql -h localhost -U testuser -d testdb -f init_db.sql
    - name: Prepare SQLx data
      run: cargo sqlx prepare --check -- --tests
      env:
        SQLX_OFFLINE: false # Explicitly false for prepare, it needs to connect
    - name: Build
      run: SQLX_OFFLINE=true cargo build --verbose
      env:
        SQLX_OFFLINE: true # Build uses offline data
    - name: Run tests
      run: SQLX_OFFLINE=true cargo test --verbose
      env:
        SQLX_OFFLINE: true # Tests use offline data by default, but can access DB if needed
