use serde::{Serialize, Deserialize};
use chrono::{NaiveDate, Utc};
use sqlx::FromRow;
use regex::Regex;

#[derive(Debug, Serialize, Deserialize, Clone, FromRow)]
pub struct Student {
    pub id: i32, // Assuming id is an integer, generated by the database
    pub name: String,
    pub surname: String,
    pub phonenumber: String,
    pub birthday: NaiveDate,
    pub email: String,
}

impl CreateStudent {
    pub fn validate(&self) -> Result<(), Vec<String>> {
        let mut errors = Vec::new();

        if self.name.trim().is_empty() {
            errors.push("Name cannot be empty.".to_string());
        }
        if self.surname.trim().is_empty() {
            errors.push("Surname cannot be empty.".to_string());
        }
        if self.phonenumber.trim().is_empty() {
            errors.push("Phone number cannot be empty.".to_string());
        }
        if self.email.trim().is_empty() {
            errors.push("Email cannot be empty.".to_string());
        }

        // Email validation using a simplified regex for demonstration.
        // RFC 5322 is complex; a production app might use a dedicated library.
        let email_regex = Regex::new(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$").unwrap();
        if !self.email.trim().is_empty() && !email_regex.is_match(&self.email) {
            errors.push("Invalid email format.".to_string());
        }

        // Phone number validation for North American format
        let phone_regex = Regex::new(r"^(\(\d{3}\)|\d{3})[- ]?\d{3}[- ]?\d{4}$").unwrap();
        if !self.phonenumber.trim().is_empty() && !phone_regex.is_match(&self.phonenumber) {
            errors.push("Invalid phone number format. Expected XXX-XXX-XXXX or (XXX) XXX-XXXX.".to_string());
        }

        // Birthday validation
        if self.birthday > Utc::now().date_naive() {
            errors.push("Birthday cannot be in the future.".to_string());
        }

        if errors.is_empty() {
            Ok(())
        } else {
            Err(errors)
        }
    }
}

// We might also want a struct for creating a new student, without the id
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct CreateStudent {
    pub name: String,
    pub surname: String,
    pub phonenumber: String,
    pub birthday: NaiveDate,
    pub email: String,
}
